# render.yaml
services:
  # ────────────────────────── Frontend ──────────────────────────
  - name: CleanUpCoop-frontend
    type: web
    runtime: static
    repo: https://github.com/Seaside-Sustainability-Web-GIS/CleanUpCoop-frontend.git
    branch: Deploy
    autoDeploy: true
    buildCommand: npm install && npm run build
    staticPublishPath: dist
    pullRequestPreviewsEnabled: true
    healthCheckPath: /

    routes:
      - type: rewrite
        source: /*
        destination: /index.html

  # ────────────────────────── Backend (Django) ──────────────────────────
  - name: CleanUpCoop-backend
    type: web
    plan: starter
    env: python
    region: ohio
    repo: https://github.com/Seaside-Sustainability-Web-GIS/CleanUpCoop-backend.git
    branch: Deploy
    autoDeploy: true
    buildCommand: |
      pip install -r requirements.txt &&
      python manage.py collectstatic --no-input
    startCommand: |
      python manage.py migrate --no-input &&
      gunicorn WebGIS.asgi:application -k uvicorn.workers.UvicornWorker
    envVars:
      # DB for Django
      - key: DATABASE_URL
        fromDatabase:
          name: CleanUpCoop-db
          property: connectionString
      # Redis URL for Django/Celery config
      - key: REDIS_URL
        fromService:
          type: redis
          name: CleanUpCoop-redis
          property: connectionString
      # Usual Django bits
      - key: SECRET_KEY
        generateValue: true
      - key: DEBUG
        value: False

  # ────────────────────────── Celery Worker (Async Tasks) ──────────────────────────
  - name: CleanUpCoop-celery
    type: worker
    env: python
    region: ohio
    repo: https://github.com/Seaside-Sustainability-Web-GIS/CleanUpCoop-backend.git
    branch: Deploy
    autoDeploy: true
    buildCommand: pip install -r requirements.txt
    startCommand: |
      celery -A WebGIS worker -l info --concurrency=${CELERY_WORKER_CONCURRENCY:-2}
    envVars:
      # Celery/Django need access to Redis and (optionally) DB
      - key: REDIS_URL
        fromService:
          type: redis
          name: CleanUpCoop-redis
          property: connectionString
      - key: DATABASE_URL
        fromDatabase:
          name: CleanUpCoop-db
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: DJANGO_SETTINGS_MODULE
        value: WebGIS.settings

  # ────────────────────────── Redis (Broker/Result Backend) ──────────────────────────
  - name: CleanUpCoop-redis
    type: redis
    plan: starter
    region: ohio
    ipAllowList: []  # keep private

databases:
  - name: CleanUpCoop-db
    plan: basic-256mb
    region: ohio
    databaseName: cleanupcoop
